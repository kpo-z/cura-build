pipeline {
    agent {label 'workerlinux'}

    environment{
        old_files = fileExists './output'
        old_containers = sh (script: 'docker ps -a -f name=cura-build-environment | wc -l', , returnStdout:true).trim()
        //def BRANCH = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
    }

    stages {
        stage ('Clean environment files') { 
            steps {
                    script {
                      // Checkout the repository and save the resulting metadata
                      def scmVars = checkout([
                        $class: 'GitSCM',
                        ...
                      ])

                      // Display the variable using scmVars
                      echo "scmVars.GIT_BRANCH"
                      echo "${scmVars.GIT_BRANCH}"

                      // Displaying the variables saving it as environment variable
                      env.GIT_BRANCH = scmVars.GIT_BRANCH
                      echo "env.GIT_BRANCH"
                      echo "${env.GIT_BRANCH}"
                    }
            }
        }
    }
/*
    stages {
        
        stage ('Clean environment files') {            

            when { expression { old_files == 'true' } }
            steps {
                sh 'sudo rm -r ./output'
            }
        }

        stage ('Clean environment docker') {            

            when { expression { old_containers == "2" } }
            steps {
                sh 'docker stop cura-build-environment'
                sh 'docker rm cura-build-environment'
                //sh 'docker image rm 8b25c9f4b47a'
            }
        }    

        stage ('Run build') {
            steps {
                sh 'sudo ./docker/linux/build.sh'
            }
        }

        stage ('Signing') {
            steps {
                withCredentials([file(credentialsId: 'private_gpg', variable: 'GPG_PRIVATE_KEY')]) {
    
                    sh 'sudo gpg --batch --import $GPG_PRIVATE_KEY'
                    sh 'sudo gpg --detach-sig --armor ./output/appimages/Ultimaker_Cura-*.AppImage'
                    sh 'sudo gpg --export -a --output ./output/appimages/public_key.asc'
                    sh 'sudo ./signing/sha1sum_gen.sh'
                }
            }
        }

    }
    
    post {
        always {
            archiveArtifacts artifacts: 'output/appimages/', fingerprint: true
        }
    }
*/
}